#!/usr/bin/env ruby

require 'optparse'
require 'os'
require 'fileutils'

require_relative '../lib/gemwarrior/game'
require_relative '../lib/gemwarrior/game_options'
require_relative '../lib/gemwarrior/version'

include Gemwarrior

GW_NAME                   = 'Gem Warrior'
GW_HOME_PATH              = "#{Dir.home}/.gemwarrior"
GW_SAVE_FILE_YAML_PATH    = "#{GW_HOME_PATH}/gw_sav.yaml"
GW_SAVE_FILE_BIN_PATH     = "#{GW_HOME_PATH}/gw_sav.dat"
GW_SAVE_FILE_MODE_DEFAULT = 'Y' # YAML
GW_OPTS_FILE_PATH         = "#{GW_HOME_PATH}/gw_opts"
GW_LOG_FILE_PATH          = "#{GW_HOME_PATH}/gw_log"
GW_WRAP_WIDTH_DEFAULT   = 80

def print_error(error)
  case error
  when OptionParser::InvalidOption
    puts "#{GW_NAME}: illegal option #{error.args.join(' ')}"
  else
    puts "An unexpected error occurred while running #{GW_NAME}:"
    puts "  #{error}\n"
  end
end

def init_config(world)
  Dir.mkdir(GW_HOME_PATH) unless Dir.exist?(GW_HOME_PATH)

  log_file_path = GW_LOG_FILE_PATH
  options_file_path = GW_OPTS_FILE_PATH
  save_file_mode_default = GW_SAVE_FILE_MODE_DEFAULT
  save_file_bin_path = GW_SAVE_FILE_BIN_PATH
  save_file_yaml_path = GW_SAVE_FILE_YAML_PATH
  sound_system_default = OS.windows? ? 'win32-sound' : 'bloops'
  world_yaml_path = File.expand_path("../../data/#{world}.yaml", __FILE__)
  world_bin_path = File.expand_path("../../data/#{world}.bin", __FILE__)
  wrap_width = GW_WRAP_WIDTH_DEFAULT

  GameOptions.add 'log_file_path',       log_file_path
  GameOptions.add 'options_file_path',   options_file_path
  GameOptions.add 'save_file_bin_path',  save_file_bin_path
  GameOptions.add 'save_file_mode',      save_file_mode_default
  GameOptions.add 'save_file_yaml_path', save_file_yaml_path
  GameOptions.add 'sound_system',        sound_system_default
  GameOptions.add 'world_bin_path',      world_bin_path
  GameOptions.add 'world_yaml_path',     world_yaml_path
  GameOptions.add 'wrap_width',          wrap_width
end

def read_options_file
  if !File.exist?(GW_OPTS_FILE_PATH)
    FileUtils.mkdir(GW_HOME_PATH)
    File.write(GW_OPTS_FILE_PATH, "")
  end

  options = {}

  File.open(GW_OPTS_FILE_PATH).readlines.each do |line|
    kv = line.chomp.split(':')
    options[kv[0].to_sym] = kv[1]
  end

  # check for null
  return options[:sound_enabled] ? options : nil
end

def parse_options_cli
  # default options
  options = {
    beast_mode:       false,
    debug_mode:       false,
    extra_command:    nil,
    fight_completion: false,
    god_mode:         false,
    new_skip:         false,
    resume_skip:      false,
    sound_enabled:    false,
    sound_system:     'bloops',
    sound_volume:     0.3,
    use_wordnik:      false,
    world_name:       'default_world'
  }

  # options file has next precedence
  unless (opts_file = read_options_file).nil?
    options[:fight_completion]  = (opts_file[:fight_completion].eql?('false') ? false : true) if opts_file[:fight_completion]

    options[:sound_enabled]     = (opts_file[:sound_enabled].eql?('false') ? false : true) if opts_file[:sound_enabled]

    options[:sound_system]      = (opts_file[:sound_system]) if opts_file[:sound_system]

    options[:sound_volume]      = (opts_file[:sound_volume].to_f) if opts_file[:sound_volume]

    options[:use_wordnik]       = (opts_file[:use_wordnik].eql?('false') ? false : true) if opts_file[:use_wordnik]

    opts_file[:world_name]      = (opts_file[:world_name]) if opts_file[:world_name]
  end

  # command line has next precedence
  optparse = OptionParser.new do |opts|
    opts.on('-b', '--beast', 'Enable debug[beastmode]') do
      options[:beast_mode] = true
    end

    opts.on('-d', '--debug', 'Enable debug commands in-game') do
      options[:debug_mode] = true
    end

    opts.on('-f', '--fight-completion', 'Fighting without specifying an enemy will attack first one it finds') do
      options[:fight_completion] = false
    end

    opts.on('-g', '--god', 'Enable debug[godmode]') do
      options[:god_mode] = true
    end

    opts.on('-k', '--wordnik', 'Enable Wordnik to generate more diverse, dynamic descriptors of entities') do
      options[:use_wordnik] = true
    end

    opts.on('-n', '--new', 'Immediately start a new game, skipping main menu') do
      options[:new_skip] = true
    end

    opts.on('-r', '--resume', 'Immediately resume the saved game, skipping main menu') do
      options[:resume_skip] = true
    end

    opts.on('-s', '--sound', 'Enable sound (experimental)') do
      options[:sound_enabled] = true
    end

    opts.on('-v', '--version', 'Display version number and exit') do
      puts "#{GW_NAME} v#{Gemwarrior::VERSION}"
      exit
    end

    opts.on('-w', '--world WORLD_NAME', String, 'Build Gemwarrior with alternate world data file') do |world_name|
      options[:world_name] = world_name
    end

    opts.on('-x', '--xtra COMMAND,PARAMS', String, 'Run a command, with optional params, immediately upon beginning the game') do |xc|
      options[:extra_command] = xc.gsub(',',' ')
    end
  end

  optparse.parse!()

  return options
end

begin
  options = parse_options_cli

  init_config(options[:world_name])

  Gemwarrior::Game.new(options)
rescue => e
  print_error(e)
  puts ("#{self.class} - #{e.class}: #{e.message}" + e.backtrace).join("\n")
  exit(false)
end
